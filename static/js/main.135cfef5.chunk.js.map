{"version":3,"sources":["util.js","Map.js","Cards/Cards.js","Chart/index.js","Chart/Chart.js","App.js","index.js","Cards/Cards.module.css","images/covid.png"],"names":["casesTypeColors","cases","hex","rgb","half_op","multiplier","recovered","deaths","Map","countries","casesType","center","zoom","className","TileLayer","url","attribution","data","map","country","i","Circle","key","countryInfo","lat","long","color","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","numeral","format","showDataOnMap","Cards","props","styles","container","Grid","spacing","justify","onClick","console","log","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","gutterBottom","variant","start","end","duration","separator","fetchdailyData","a","axios","get","confirmed","date","reportDate","total","Chart","useState","dailyData","setDailyData","useEffect","fetchAPI","lineChart","gridLines","display","labels","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","title","undefined","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","fetch","then","response","json","name","value","iso2","getCountriesData","onCountryChange","e","countryCode","target","to","src","corona","alt","FormControl","NativeSelect","defaultValue","onChange","path","exact","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.135cfef5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#ff5100\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#ff0031\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\nexport const showDataOnMap = (data, casesType = \"recovered\") =>\r\n  data.map((country, i) => (\r\n    <Circle\r\n      key={i}\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport { Card, CardContent, Typography, Grid } from \"@material-ui/core\";\r\nimport styles from \"./Cards.module.css\";\r\nimport CountUp from \"react-countup\";\r\nimport cx from \"classnames\";\r\n\r\nconst Cards = (props, ...click) => {\r\n  // console.log(props);\r\n  // if (!confirmed) {\r\n  //   return \"Loading...\";\r\n  // }\r\n  // console.log(props.data);\r\n  if (!props.data.cases) {\r\n    return \"Loading...\";\r\n  }\r\n  return (\r\n    <div className={styles.container}>\r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid\r\n          onClick={() => console.log(\"cases\")}\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.infected)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Infected\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.cases}\r\n                duration={3}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {/* {new Date(lastUpdate).toDateString()} */}\r\n            </Typography>\r\n            <br />\r\n            <Typography variant=\"body2\">No of Active Cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          onClick={() => console.log(\"cases\")}\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.deaths)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Deaths\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.deaths}\r\n                duration={3}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {\" \"}\r\n              {/* {new Date(lastUpdate).toDateString()} */}\r\n            </Typography>\r\n            <br />\r\n            <Typography variant=\"body2\">No of Deaths Cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n        <Grid\r\n          onClick={() => console.log(\"cases\")}\r\n          item\r\n          component={Card}\r\n          xs={12}\r\n          md={3}\r\n          className={cx(styles.card, styles.recovered)}\r\n        >\r\n          <CardContent>\r\n            <Typography color=\"textSecondary\" gutterBottom>\r\n              Recovered\r\n            </Typography>\r\n            <Typography variant=\"h5\">\r\n              {\" \"}\r\n              <CountUp\r\n                start={0}\r\n                end={props.data.recovered}\r\n                duration={3}\r\n                separator=\",\"\r\n              />\r\n            </Typography>\r\n            <Typography color=\"textSecondary\">\r\n              {\" \"}\r\n              {/* {new Date(lastUpdate).toDateString()} */}\r\n            </Typography>\r\n            <br />\r\n            <Typography variant=\"body2\">No of Recovered Cases</Typography>\r\n          </CardContent>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\nexport default Cards;\r\n","import axios from \"axios\";\r\n\r\nconst url = \"https://covid19.mathdro.id/api\";\r\n\r\nexport const fetchdailyData = async () => {\r\n  try {\r\n    const { data } = await axios.get(`${url}/daily`);\r\n    return data.map(({ confirmed, deaths, reportDate: date }) => ({\r\n      confirmed: confirmed.total,\r\n      deaths: deaths.total,\r\n      date,\r\n    }));\r\n  } catch (e) {}\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { fetchdailyData } from \"./index\";\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\nconst Chart = (props) => {\r\n  const [dailyData, setDailyData] = useState([]);\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchdailyData());\r\n    };\r\n    fetchAPI();\r\n  }, []);\r\n\r\n  console.log(props);\r\n  // Chart.defaults.scale.gridLines.drawOnChartArea = false;\r\n  const lineChart = dailyData ? (\r\n    <Line\r\n      data={{\r\n        gridLines: {\r\n          display: false,\r\n          color: \"#FFFFFF\",\r\n        },\r\n        labels: dailyData.map((date) => date),\r\n        display: false,\r\n        datasets: [\r\n          {\r\n            data: dailyData.map(({ confirmed }) => confirmed),\r\n            label: \"Infected\",\r\n            borderColor: \"#3333ff\",\r\n            fill: true,\r\n          },\r\n          {\r\n            data: dailyData.map(({ deaths }) => deaths),\r\n            label: \"Deaths\",\r\n            borderColor: \"red\",\r\n            backgroundColor: \"rgba(055, 0, 0, 0.5)\",\r\n            fill: true,\r\n          },\r\n        ],\r\n      }}\r\n    />\r\n  ) : null;\r\n\r\n  const barChart = (\r\n    <Bar\r\n      data={{\r\n        labels: [\"Confirmed\", \"Deaths\", \"Recovered\"],\r\n\r\n        datasets: [\r\n          {\r\n            label: \"people\",\r\n            backgroundColor: [\"orange\", \"red\", \"rgba(115, 226, 95, 0.835)\"],\r\n            data: [props.data.cases, props.data.deaths, props.data.recovered],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: {\r\n          display: true,\r\n          // text: `{props.data.country}`,\r\n        },\r\n      }}\r\n    />\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        {props.data.country === undefined || props === \"worldwide\"\r\n          ? lineChart\r\n          : barChart}\r\n      </div>\r\n      {/* <div>{lineChart}</div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chart;\r\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { FormControl, NativeSelect } from \"@material-ui/core\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\nimport Cards from \"./Cards/Cards\";\nimport Chart from \"./Chart/Chart\";\nimport corona from \"./images/covid.png\";\n\n//https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({\n    lat: 20.5937,\n    lng: 78.9629,\n  });\n  const [mapZoom, setMapZoom] = useState(4);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          setCountries(countries);\n          setMapCountries(data);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    console.log(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        if (countryCode !== \"worldwide\") {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4.3);\n        }\n      });\n  };\n\n  return (\n    <Router>\n      <div className=\"app\">\n        <div className=\"app__header\">\n          {/* <h1>COVID-19 Tracker</h1> */}\n          <Link to=\"/\">\n            <img src={corona} alt=\"Covid-19\" className=\"ant\" />\n          </Link>\n          <Link to=\"/\" className=\"link\">\n            <h3\n              style={{ color: \" #9e5c00\" }}\n              className=\"removedeco\"\n              onClick={() => setCasesType(\"cases\")}\n            >\n              <b>\n                Infected {\"\\u00A0\"}\n                {\"\\u00A0\"}\n              </b>\n            </h3>\n          </Link>\n          <Link to=\"/\" className=\"link\">\n            <strong>\n              <h3\n                style={{ color: \"#7dd71d\" }}\n                className=\"removedeco\"\n                onClick={() => setCasesType(\"recovered\")}\n              >\n                Recovered{\"\\u00A0\"}\n                {\"\\u00A0\"}\n              </h3>\n            </strong>\n          </Link>\n          <Link to=\"/\" className=\"link\">\n            <b>\n              <h3\n                style={{ color: \"#ff0000\" }}\n                className=\"removedeco\"\n                onClick={() => setCasesType(\"deaths\")}\n              >\n                Deaths{\"\\u00A0\"}\n                {\"\\u00A0\"}\n              </h3>\n            </b>\n          </Link>\n          <Link to=\"/chart\" className=\"link\">\n            <h3 className=\"graph\">Graph</h3>\n          </Link>\n        </div>\n        <div>\n          <Cards data={countryInfo} />\n          <br />\n        </div>\n        <div className=\"app__dropdown\">\n          <FormControl>\n            <NativeSelect\n              className=\"options\"\n              defaultValue=\"IN\"\n              onChange={onCountryChange}\n            >\n              <option value=\"worldwide\"> Worldwide</option>\n\n              {countries.map((country, i) => (\n                <option key={i} value={country.value}>\n                  {country.name}\n                </option>\n              ))}\n            </NativeSelect>\n          </FormControl>\n        </div>\n        <Switch>\n          <Route path=\"/\" exact>\n            <Map\n              countries={mapCountries}\n              casesType={casesType}\n              center={mapCenter}\n              zoom={mapZoom}\n            />\n          </Route>\n        </Switch>\n        <Switch>\n          <Route path=\"/chart\" exact>\n            <Chart\n              data={countryInfo}\n              value={() => setInputCountry(\"worldwide\")}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__2NFes\",\"card\":\"Cards_card__3JA_X\",\"infected\":\"Cards_infected__KdUri\",\"recovered\":\"Cards_recovered__UeL5t\",\"deaths\":\"Cards_deaths__3qC3E\"};","module.exports = __webpack_public_path__ + \"static/media/covid.d7265326.png\";"],"sourceRoot":""}